mkdir -p ui/{public,src/{assets/{images,styles},components/{common,layout},pages,services,utils},tests}

touch ui/README.md
# Sovereign Studio UI

This is the frontend UI for the Sovereign Studio project, a professional music production DAW with artist ownership.

## Setup
1. `cd ui`
2. `npm install`
3. `npm run dev` (runs on http://localhost:5173)

## Scripts
- `npm run dev`: Start dev server
- `npm run build`: Build for production
- `npm run test`: Run tests

ui/package.json
{
  "name": "sovereign-studio-ui",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-router-dom": "^6.0.0",
    "tailwindcss": "^3.0.0",
    "@solana/web3.js": "^1.0.0",
    "react-responsive": "^9.0.0"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.0.0",
    "@testing-library/react": "^14.0.0",
    "@types/jest": "^29.0.0",
    "@vitejs/plugin-react": "^4.0.0",
    "autoprefixer": "^10.0.0",
    "jest": "^29.0.0",
    "postcss": "^8.0.0",
    "ts-jest": "^29.0.0",
    "typescript": "^5.0.0",
    "vite": "^5.0.0",
    "@vitejs/plugin-pwa": "^0.17.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "jest"
  }
}ui/tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./

tsconfig.node.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./
tsconfig.node.json" }]
}
ui/.gitignore
node_modules/
.pnp
.pnp.js
dist/
coverage/
*.log
npm-debug.log*
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.vscode/
.idea/

ui/vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { VitePWA } from '@vitejs/plugin-pwa'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react(), VitePWA()],
})ui/index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/crown-waveform.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sovereign Studio</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

touch ui/src/{index.tsx,App.tsx,main.tsx}
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './assets/styles/index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)App.tsx

function App() {
  return (
    <Router>
      <div className="min-h-screen flex flex-col">
        <Header />
        <div className="flex flex-1">
          <Sidebar />
          <main className="flex-grow p-4">
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/collaborate" element={<Collaborate />} />
              <Route path="/effects" element={<Effects />} />
              <Route path="/settings" element={<Settings />} />
            </Routes>
          </main>
        </div>
        <Footer />
      </div>
    </Router>
  )
}

export default App

main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './assets/styles/index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
touch ui/src/components/common/
{Button.tsx
import { MouseEvent } from 'react';

interface ButtonProps {
  label: string;
  onClick?: (e: MouseEvent<HTMLButtonElement>) => void;
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
}

export default function Button({ label, onClick, variant = 'primary', disabled = false }: ButtonProps) {
  const baseStyles = 'px-4 py-2 rounded font-medium transition-colors';
  const variantStyles =
    variant === 'primary'
      ? 'bg-blue-600 hover:bg-blue-700 text-white'
      : 'bg-gray-600 hover:bg-gray-700 text-white';

  return (
    <button
      className={`${baseStyles} ${variantStyles} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
      onClick={onClick}
      disabled={disabled}
    >
      {label}
    </button>
  );
},Header.tsx,
import React from "react";
import "./Header.css";

const Header: React.FC = () => {
  return (
    <header className="studio-header">
      <div className="logo">Sovereign Studio</div>
      <nav>
        <ul className="nav-list">
          <li><a href="/">Home</a></li>
          <li><a href="/studio">Studio</a></li>
          <li><a href="/settings">Settings</a></li>
          <li><a href="/profile">Profile</a></li>
        </ul>
      </nav>
    </header>
  );
};

export default Header;

Waveform.tsx
interface WaveformProps {
  audioUrl?: string;
}

export default function Waveform({ audioUrl }: WaveformProps) {
  return (
    <div className="relative h-32 bg-gray-800 rounded overflow-hidden">
      <div
        className="absolute inset-0 bg-cover bg-center"
        style={{ backgroundImage: "url('/src/assets/images/waveform-bg.png')" }}
      />
      {audioUrl ? (
        <p className="text-center pt-12 text-gray-300">Waveform for {audioUrl}</p>
      ) : (
        <p className="text-center pt-12 text-gray-300">No audio loaded</p>
      )}
    </div>
  );
},

Slider.tsx
import { ChangeEvent } from 'react';

interface SliderProps {
  value: number;
  onChange: (value: number) => void;
  min?: number;
  max?: number;
  step?: number;
  label?: string;
}

export default function Slider({
  value,
  onChange,
  min = 0,
  max = 100,
  step = 1,
  label,
}: SliderProps) {
  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    onChange(Number(e.target.value));
  };

  return (
    <div className="flex flex-col space-y-2">
      {label && <label className="text-sm font-medium">{label}</label>}
      <input
        type="range"
        value={value}
        onChange={handleChange}
        min={min}
        max={max}
        step={step}
        className="w-full accent-blue-600"
      />
      <span className="text-sm">{value}</span>
    </div>
  );
}} 

ui/src/components/layout/{Footer.tsx,Sidebar.tsx}

touch ui/src/pages/{Home.tsx,Collaborate.tsx,Effects.tsx,Settings.tsx} ui/src/services/api.ts ui/src/utils/helpers.ts

touch ui/tests/

App.test.tsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import Header from './components/common/Header'
import Sidebar from './components/layout/Sidebar'
import Footer from './components/layout/Footer'

import Home from './pages/Home'
import Collaborate from './pages/Collaborate'
import Effects from './pages/Effects'
import Settings from './pages/Settings'

function App() {
  return (
    <Router>
      <div className="min-h-screen flex flex-col">
        <Header />
        <div className="flex flex-1">
          <Sidebar />
          <main className="flex-grow p-4">
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/collaborate" element={<Collaborate />} />
              <Route path="/effects" element={<Effects />} />
              <Route path="/settings" element={<Settings />} />
            </Routes>
          </main>
        </div>
        <Footer />
      </div>
    </Router>
  )
}

export default App
